openapi: 3.0.3
info:
  title: Authentication API
  description: API for user authentication, registration, and token management.
  version: 1.0.0
servers:
  - url: https://localhost:8443/api
    description: Local development server
paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Creates a new user profile and returns access and refresh tokens.
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
      responses:
        '200':
          description: Successfully registered user
          content:
            application/json:
              schema:
                type: object
                properties:
                  Tokens:
                    $ref: '#/components/schemas/TokenResponse'
                  RedirectUrl:
                    type: string
                    example: https://localhost:8443/dashboard
        '400':
          description: Invalid input or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/login:
    post:
      summary: User login
      description: Authenticates a user and returns access and refresh tokens.
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  Tokens:
                    $ref: '#/components/schemas/TokenResponse'
                  RedirectUrl:
                    type: string
                    example: https://localhost:8443/dashboard
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/refresh:
    post:
      summary: Refresh access token
      description: Refreshes the access token using the refresh token stored in cookies.
      operationId: refresh
      responses:
        '200':
          description: Successfully refreshed access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  RedirectUrl:
                    type: string
                    example: https://localhost:8443/dashboard
        '401':
          description: Invalid or missing refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/refresh-access:
    post:
      summary: Refresh access token explicitly
      description: Generates a new access token using the refresh token.
      operationId: refreshAccessToken
      responses:
        '200':
          description: Successfully refreshed access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  AccessToken:
                    type: string
                    description: New JWT access token
        '401':
          description: Invalid or missing refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/logout:
    post:
      summary: User logout
      description: Invalidates the refresh token and clears access and refresh token cookies.
      operationId: logout
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
  /auth/verify:
    get:
      summary: Verify JWT token
      description: Validates the provided JWT token in the Authorization header.
      operationId: verifyToken
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/me:
    get:
      summary: Get user profile
      description: Retrieves the authenticated user's profile information.
      operationId: getMyProfile
      responses:
        '200':
          description: Successfully retrieved user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '401':
          description: Invalid or missing access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    RegisterDto:
      type: object
      required:
        - Name
        - Email
        - Password
      properties:
        Name:
          type: string
          description: User's full name
        Email:
          type: string
          format: email
          description: User's email address
        Password:
          type: string
          format: password
          description: User's password
    LoginDto:
      type: object
      required:
        - Email
        - Password
      properties:
        Email:
          type: string
          format: email
          description: User's email address
        Password:
          type: string
          format: password
          description: User's password
    TokenResponse:
      type: object
      properties:
        AccessToken:
          type: string
          description: JWT access token
        RefreshToken:
          type: string
          description: Refresh token for generating new access tokens
    ProfileResponse:
      type: object
      properties:
        Name:
          type: string
          description: User's full name
        Email:
          type: string
          format: email
          description: User's email address
        Phone:
          type: string
          nullable: true
          description: User's phone number
        Company:
          type: string
          nullable: true
          description: User's company
        Position:
          type: string
          nullable: true
          description: User's position
        Description:
          type: string
          nullable: true
          description: User's description
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
        errorCode:
          type: string
          description: Specific error code
      required:
        - error
        - errorCode
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT